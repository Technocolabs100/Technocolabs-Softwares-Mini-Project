# -*- coding: utf-8 -*-
"""Copy of big_mart

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tB9m8HhkKADjomBfTIZoIlsqS8rU9zA4

# ***Importing Dependencies**👍
"""

#Loading data set from CSV file to pandas dataframe. 
big_mart_data = pd.read_csv('/content/Train.csv')

#first 5 rows of data frame.
big_mart_data.head()

#first 5 rows of data frame from last.
big_mart_data.tail()

#Number of data points and number of features
big_mart_data.shape

#getting some information about the dataset
big_mart_data.info()

"""Categorical features:
*   Item_Identifier
*   Item_Fat_Content
*   Item_Type 
*   Outlet_Identifier  
*   Outlet_Size 
*   Outlet_Location_Type
*   Outlet_Type  






"""

#checking for the missing values
big_mart_data.isnull().sum()

"""**Handling missing values**

Mean -> average of the numbers

Mode -> Most common terms

Median -> centre value among all the values

**NOTE**

MEAN IS TAKEN FOR THE NUMERICAL VALUES

MODE IS TAKEN FOR THE CATEGORICAL VALUES
"""

big_mart_data['Item_Weight'].mean()

#inserting mean value in the Nan
big_mart_data['Item_Weight'].fillna(big_mart_data['Item_Weight'].mean(), inplace = True)

big_mart_data.isnull().sum()

big_mart_data.describe()

big_mart_data['Item_Weight'].describe()

big_mart_data['Item_MRP'].describe()

"""**Mode of the outlet size**"""

mode_outlet_size = big_mart_data.pivot_table(values = 'Outlet_Size',columns = 'Outlet_Type', aggfunc=(lambda x: x.mode()[0]))

print(mode_outlet_size)

#replacing missing value of otlet size
missing_values = big_mart_data['Outlet_Size'].isnull()

print(missing_values)#false represent value is present and true represent values is absent.

big_mart_data.loc[missing_values,'Outlet_Size'] = big_mart_data.loc[missing_values,'Outlet_Type'].apply(lambda x: mode_outlet_size[x] )

big_mart_data.isnull().sum()

"""**Data analysis**"""

big_mart_data.describe()

"""**Numerical features**"""

sns.set()

#Item weight distrbution
plt.figure(figsize= (6,6))
sns.distplot(big_mart_data['Item_Weight'])
plt.show()

"""**Item visibility **"""

#item_Visibility
plt.figure(figsize= (6,6))
sns.distplot(big_mart_data['Item_Visibility'])
plt.show()

#Item_MRP	
plt.figure(figsize= (6,6))
sns.distplot(big_mart_data['Item_MRP'])
plt.show()

#Outlet_Establishment_Year
plt.figure(figsize= (6,6))
sns.countplot(big_mart_data['Outlet_Establishment_Year'])
plt.show()

#Item_Fat_Content
plt.figure(figsize= (6,6))
sns.countplot(x='Item_Fat_Content', data=big_mart_data)
plt.show()

#Item_Type
plt.figure(figsize= (30,9))
sns.countplot(x='Item_Type', data=big_mart_data)
plt.show()

plt.figure(figsize= (6,9))
sns.countplot(x='Outlet_Size', data=big_mart_data)
plt.show()

#big_mart_data.head()
big_mart_data.tail()

"""**Label Encoding**"""

#using categorical values and transform into numerical form
encoder = LabelEncoder()
big_mart_data['Item_Identifier'] = encoder.fit_transform(big_mart_data['Item_Identifier'])

big_mart_data['Item_Fat_Content'] = encoder.fit_transform(big_mart_data['Item_Fat_Content'])

big_mart_data['Item_Type'] = encoder.fit_transform(big_mart_data['Item_Type'])

big_mart_data['Outlet_Identifier'] = encoder.fit_transform(big_mart_data['Outlet_Identifier'])

big_mart_data['Outlet_Size'] = encoder.fit_transform(big_mart_data['Outlet_Size'])

big_mart_data['Outlet_Location_Type'] = encoder.fit_transform(big_mart_data['Outlet_Location_Type'])

big_mart_data['Outlet_Type'] = encoder.fit_transform(big_mart_data['Outlet_Type'])

big_mart_data.head()

"""**spliting features and targets**

"""

x= big_mart_data.drop(columns='Item_Outlet_Sales', axis =1 )
y= big_mart_data['Item_Outlet_Sales']

print(x)

print(y)

"""**Spliting train and test data**"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=2)

print(x.shape,x_train.shape,x_test.shape)

"""**Machine learning Model training**

XGBoost regressor
"""

regressor = XGBRegressor()

regressor.fit(x_train,y_train)

#prediction on training data
training_data_prediction = regressor.predict(x_train)

#R squared values
r2_train = metrics.r2_score(y_train,training_data_prediction)

print('R squared values=', r2_train)

#prediction on test data
test_data_prediction = regressor.predict(x_test)

#R squared values
r2_test = metrics.r2_score(y_test,test_data_prediction)

print('R squared values=', r2_test)

